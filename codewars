function _if(bool, func1, func2) {
return bool ? func1() : func2();
}

const quarterOf = (month) => {
  // Your code here
   if (month <= 3) {
    return 1
  } else if (month <= 6) {
    return 2
  } else if (month <= 9) {
    return 3
  } else if (month <= 12) {
    return 4
  }
}

function simpleMultiplication(number) {
    // your code........
  return number * (number % 2 > 0 ? 9 : 8)
}


function reverseWords(str){
  return str.split(' ').reverse().join(' '); // reverse those words
}


function howManyLightsabersDoYouOwn(name) {
  return name === 'Zach' ? 18 : 0;
}


function powersOfTwo(n){
  var result = [];
  for (var i = 0; i <= n; i++) {
    result.push(Math.pow(2, i));
  }
  return result;
}



var humanYearsCatYearsDogYears = function(humanYears) {
  if (humanYears <= 2)
    return [humanYears, 6 + 9 * humanYears, 6 + 9 * humanYears]
  else
    return [humanYears, 16 + 4 * humanYears, 14 + 5 * humanYears]
}



const zeroFuel = (distanceToPump, mpg, fuelLeft) => {
  let ourDistance = mpg * fuelLeft
  if(ourDistance >= distanceToPump){
   return true;
  }else{
   return false
}
};


sayHello = name => 'Hello, ' + name;


function booleanToString(b){
  if(b){
    return "true";
  }else{
    return "false";
  }
}


function monkeyCount(n) {
  var monkey = [];
  for (i = 1; i <= n; i++) {
    monkey.push(i);
  }
  return monkey;
}


function sumStr(a,b) {
  return (+a + +b).toString();
}


function howMuchILoveYou(nbPetals){
  if(nbPetals%6 == 1){
    return ("I love you");
  }else if(nbPetals%6 == 2){
    return ("a little");
  }else if(nbPetals%6 ==3){
    return ("a lot");
  }else if(nbPetals%6 ==4){
    return ("passionately");
  }else if(nbPetals%6 == 5){
    return ("madly");
  }else{
    return ("not at all");
  }
}

howMuchILoveYou(0);



function duckDuckGoose(players, goose) {
  
  return players[(goose-1)%players.length].name
}


function numberToPower(number, power){
  result = 1
  for (let i=1; i <= power; i++){
    result = result * number;
  }
  return result
}


function makeNegative(num) {
  return Math.sign(num) === 1 ? -num : num
}
